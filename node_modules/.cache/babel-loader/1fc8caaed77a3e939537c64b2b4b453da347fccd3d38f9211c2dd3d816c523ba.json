{"ast":null,"code":"var _jsxFileName = \"D:\\\\Book Talk\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport useLocalStorage from \"../custom-hooks/hook-localStorage/useLocalStorage\";\nimport { AUTH_DATA_STORAGE } from \"../api/api\";\nimport * as authServices from \"../services/authServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nconst AuthContextProvider = props => {\n  _s();\n  const [state, setState] = useLocalStorage(AUTH_DATA_STORAGE, []);\n  const [serverError, setServerError] = useState(null);\n  async function userRegister(user) {\n    const allUsers = await authServices.getAllUsers();\n    const existingEmail = allUsers.find(x => x.email === user.email);\n    if (existingEmail) {\n      serverError(\"Email is alredy taken...\");\n      return serverError;\n    }\n    const existingUsername = allUsers.find(x => x.username === user.username);\n    if (existingUsername) {\n      serverError(\"Username is alredy taken...\");\n      return serverError;\n    }\n  }\n  async function userLogin(user) {\n    const allUsers = await authServices.getAllUsers();\n    const existingUser = allUsers.find(x => x.email === user.email);\n    if (existingUser !== undefined) {\n      serverError(\"Email or password don't match...\");\n      return serverError;\n    }\n    if (existingUser.password !== user.password) {}\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state,\n      serverError,\n      userRegister,\n      userLogin\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthContextProvider, \"NNRl5HmEEv0ZfWLkQS6DElQ9WKw=\", false, function () {\n  return [useLocalStorage];\n});\n_c = AuthContextProvider;\nexport default AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useState","useLocalStorage","AUTH_DATA_STORAGE","authServices","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","props","_s","state","setState","serverError","setServerError","userRegister","user","allUsers","getAllUsers","existingEmail","find","x","email","existingUsername","username","userLogin","existingUser","undefined","password","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Book Talk/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport useLocalStorage from \"../custom-hooks/hook-localStorage/useLocalStorage\";\r\nimport { AUTH_DATA_STORAGE } from \"../api/api\";\r\nimport * as authServices from \"../services/authServices\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nconst AuthContextProvider = (props) => {\r\n\r\n    const [state, setState] = useLocalStorage(AUTH_DATA_STORAGE, []);\r\n    const [serverError, setServerError] = useState(null);\r\n\r\n    async function userRegister(user) {\r\n        const allUsers = await authServices.getAllUsers();\r\n        const existingEmail = allUsers.find(x => x.email === user.email);\r\n        if (existingEmail) {\r\n            serverError(\"Email is alredy taken...\");\r\n            return serverError;\r\n        }\r\n\r\n        const existingUsername = allUsers.find(x => x.username === user.username);\r\n        if (existingUsername) {\r\n            serverError(\"Username is alredy taken...\");\r\n            return serverError;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    async function userLogin(user) {\r\n        const allUsers = await authServices.getAllUsers();\r\n        const existingUser = allUsers.find(x => x.email === user.email);\r\n        if(existingUser !== undefined ){\r\n            serverError(\"Email or password don't match...\");\r\n            return serverError;\r\n        }\r\n\r\n        if(existingUser.password !== user.password) {\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user: state, serverError, userRegister, userLogin }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContextProvider;"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,eAAe,MAAM,mDAAmD;AAC/E,SAASC,iBAAiB,QAAQ,YAAY;AAC9C,OAAO,KAAKC,YAAY,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,MAAMQ,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAEnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,eAAe,CAACC,iBAAiB,EAAE,EAAE,CAAC;EAChE,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEpD,eAAec,YAAYA,CAACC,IAAI,EAAE;IAC9B,MAAMC,QAAQ,GAAG,MAAMb,YAAY,CAACc,WAAW,CAAC,CAAC;IACjD,MAAMC,aAAa,GAAGF,QAAQ,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKN,IAAI,CAACM,KAAK,CAAC;IAChE,IAAIH,aAAa,EAAE;MACfN,WAAW,CAAC,0BAA0B,CAAC;MACvC,OAAOA,WAAW;IACtB;IAEA,MAAMU,gBAAgB,GAAGN,QAAQ,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACG,QAAQ,KAAKR,IAAI,CAACQ,QAAQ,CAAC;IACzE,IAAID,gBAAgB,EAAE;MAClBV,WAAW,CAAC,6BAA6B,CAAC;MAC1C,OAAOA,WAAW;IACtB;EAGJ;EAEA,eAAeY,SAASA,CAACT,IAAI,EAAE;IAC3B,MAAMC,QAAQ,GAAG,MAAMb,YAAY,CAACc,WAAW,CAAC,CAAC;IACjD,MAAMQ,YAAY,GAAGT,QAAQ,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKN,IAAI,CAACM,KAAK,CAAC;IAC/D,IAAGI,YAAY,KAAKC,SAAS,EAAE;MAC3Bd,WAAW,CAAC,kCAAkC,CAAC;MAC/C,OAAOA,WAAW;IACtB;IAEA,IAAGa,YAAY,CAACE,QAAQ,KAAKZ,IAAI,CAACY,QAAQ,EAAE,CAE5C;EACJ;EAEA,oBACItB,OAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAAEd,IAAI,EAAEL,KAAK;MAAEE,WAAW;MAAEE,YAAY;MAAEU;IAAU,CAAE;IAAAM,QAAA,EAC9EtB,KAAK,CAACsB;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAE/B,CAAC;AAAAzB,EAAA,CAxCKF,mBAAmB;EAAA,QAEKN,eAAe;AAAA;AAAAkC,EAAA,GAFvC5B,mBAAmB;AA0CzB,eAAeA,mBAAmB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}